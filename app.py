from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse, FileResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import os
from datetime import datetime
from dotenv import load_dotenv
import subprocess
import tempfile
import re

# Load environment variables from .env file
load_dotenv()

from generate_prompt import InputSpec, build_prompt, call_openai_chat

app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

os.makedirs("reports", exist_ok=True)

def create_html_report(content: str, filename: str, language: str = "en") -> str:
    """Create an HTML report from text content"""
    html_path = f"reports/{filename}.html"
    
    # Create HTML content
    html_content = create_html_document(content, language)
    
    # Write HTML file
    with open(html_path, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    return html_path

def create_html_document(content: str, language: str = "en") -> str:
    """Convert text content to HTML format"""
    
    # Language-specific translations
    translations = {
        "en": {
            "title": "AI Trade Report - Professional Market Analysis",
            "report_title": "AI Trade Report",
            "report_overview": "Report Overview",
            "generated_by": "Generated by:",
            "ai_powered": "AI-Powered Market Research",
            "date": "Date:",
            "report_type": "Report Type:",
            "comprehensive_analysis": "Comprehensive Market Analysis",
            "footer_text1": "This report was generated using AI-powered market research technology.",
            "footer_text2": "For questions or additional analysis, please contact your research team.",
            "print": "Print",
            "download_pdf": "Download PDF"
        },
        "it": {
            "title": "AI Trade Report - Analisi di Mercato Professionale",
            "report_title": "AI Trade Report",
            "report_overview": "Panoramica del Report",
            "generated_by": "Generato da:",
            "ai_powered": "Ricerca di Mercato basata su AI",
            "date": "Data:",
            "report_type": "Tipo di Report:",
            "comprehensive_analysis": "Analisi di Mercato Completa",
            "footer_text1": "Questo report Ã¨ stato generato utilizzando tecnologia di ricerca di mercato basata su AI.",
            "footer_text2": "Per domande o analisi aggiuntive, contatta il tuo team di ricerca.",
            "print": "Stampa",
            "download_pdf": "Scarica PDF"
        }
    }
    
    t = translations.get(language, translations["en"])
    
    # Escape HTML special characters
    def escape_html(text):
        special_chars = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#x27;'
        }
        for char, replacement in special_chars.items():
            text = text.replace(char, replacement)
        return text
    
    # Start HTML document
    html = """<!DOCTYPE html>
<html lang=""" + language + """>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>""" + t['title'] + """</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
    <style>
        html, body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
            color: #333;
            width: 100%;
            min-width: 100%;
            box-sizing: border-box;
        }
        .container {
            width: 100vw;
            min-width: 100%;
            margin: 0;
            background: white;
            padding: 40px;
            border-radius: 0;
            box-shadow: none;
            box-sizing: border-box;
        }
        h1 {
            color: #2c3e50;
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
            margin-bottom: 30px;
            text-align: center;
        }
        h2 {
            color: #34495e;
            border-bottom: 2px solid #ecf0f1;
            padding-bottom: 8px;
            margin-top: 30px;
            margin-bottom: 20px;
        }
        h3 {
            color: #2c3e50;
            margin-top: 25px;
            margin-bottom: 15px;
        }
        h4 {
            color: #7f8c8d;
            margin-top: 20px;
            margin-bottom: 10px;
        }
        p {
            margin-bottom: 15px;
            text-align: justify;
        }
        ul, ol {
            margin-bottom: 15px;
            padding-left: 30px;
        }
        li {
            margin-bottom: 8px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            background: white;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        th, td {
            border: 1px solid #ddd;
            padding: 12px;
            text-align: left;
        }
        th {
            background-color: #3498db;
            color: white;
            font-weight: bold;
        }
        tr:nth-child(even) {
            background-color: #f8f9fa;
        }
        tr:hover {
            background-color: #e8f4f8;
        }
        .highlight {
            background-color: #fff3cd;
            padding: 15px;
            border-left: 4px solid #ffc107;
            margin: 20px 0;
        }
        .summary-box {
            background-color: #d4edda;
            padding: 20px;
            border-left: 4px solid #28a745;
            margin: 20px 0;
            border-radius: 4px;
        }
        .warning-box {
            background-color: #f8d7da;
            padding: 15px;
            border-left: 4px solid #dc3545;
            margin: 20px 0;
            border-radius: 4px;
        }
        .code-block {
            background-color: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 4px;
            padding: 15px;
            font-family: 'Courier New', monospace;
            margin: 15px 0;
            overflow-x: auto;
        }
        .footer {
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #ecf0f1;
            text-align: center;
            color: #7f8c8d;
            font-size: 0.9em;
        }
        /* Professional Report Header */
        .report-header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 1000;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            padding: 1rem 0;
        }
        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 2rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        .header-brand {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            font-weight: 700;
            font-size: 1.25rem;
            color: #1f2937;
        }
        .header-brand .brand-icon {
            font-size: 1.5rem;
            background: linear-gradient(135deg, #2563eb, #7c3aed);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        .header-actions {
            display: flex;
            gap: 0.75rem;
        }
        .action-btn {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            background: linear-gradient(135deg, #2563eb, #1d4ed8);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 0.75rem;
            cursor: pointer;
            font-size: 0.875rem;
            font-weight: 600;
            font-family: 'Inter', sans-serif;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }
        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }
        .action-btn:active {
            transform: translateY(0);
        }
        .action-btn.print {
            background: linear-gradient(135deg, #10b981, #059669);
        }
        .action-btn.pdf {
            background: linear-gradient(135deg, #ef4444, #dc2626);
        }
        .btn-icon {
            font-size: 1rem;
        }
        .btn-text {
            font-size: 0.875rem;
        }
        
        /* Report Title Section */
        .report-title-section {
            text-align: center;
            margin-bottom: 2rem;
            padding-top: 6rem;
        }
        .title-underline {
            width: 100px;
            height: 4px;
            background: linear-gradient(90deg, #2563eb, #7c3aed);
            margin: 1rem auto 0;
            border-radius: 2px;
        }
        
        /* Enhanced Summary Box */
        .summary-box {
            background: linear-gradient(135deg, #f0f9ff, #e0f2fe);
            border: 1px solid #bae6fd;
            border-radius: 1rem;
            padding: 1.5rem;
            margin: 2rem 0;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }
        .summary-header {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
            color: #0369a1;
            font-size: 1.125rem;
        }
        .summary-icon {
            font-size: 1.25rem;
        }
        .summary-content {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
        }
        .summary-item {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
        }
        .item-label {
            font-size: 0.875rem;
            font-weight: 500;
            color: #64748b;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }
        .item-value {
            font-size: 1rem;
            font-weight: 600;
            color: #1e293b;
        }
                 @media print {
             body { 
                 background-color: white !important; 
                 color: black !important;
                 font-size: 12pt;
                 line-height: 1.4;
                 margin: 0 !important;
                 padding: 0 !important;
                 width: 100% !important;
             }
             .container { 
                 box-shadow: none !important; 
                 background: white !important;
                 padding: 20px !important;
                 margin: 0 !important;
                 width: 100% !important;
                 min-width: 100% !important;
                 max-width: none !important;
                 box-sizing: border-box !important;
                 height: auto !important;
                 min-height: 100vh !important;
             }
             .report-header { display: none !important; }
             .action-buttons { display: none !important; }
             h1, h2, h3, h4 { 
                 color: black !important; 
                 page-break-after: avoid;
                 page-break-inside: avoid;
             }
             table { 
                 page-break-inside: avoid; 
                 border-collapse: collapse !important;
             }
             .summary-box, .highlight, .warning-box {
                 background: #f8f9fa !important;
                 border: 1px solid #ddd !important;
                 color: black !important;
                 page-break-inside: avoid;
             }
             p, li {
                 page-break-inside: avoid;
                 orphans: 3;
                 widows: 3;
             }
             .footer {
                 page-break-inside: avoid;
             }
         }
        /* ===== MOBILE RESPONSIVE DESIGN ===== */
        @media (max-width: 1200px) {
            .header-content {
                padding: 0 1.5rem;
            }
            .container {
                padding: 30px;
            }
        }
        
        @media (max-width: 768px) {
            /* Mobile Header */
            .report-header {
                padding: 0.75rem 0;
            }
            .header-content {
                padding: 0 1rem;
                flex-direction: column;
                gap: 0.75rem;
                align-items: center;
            }
            .header-brand {
                font-size: 1.125rem;
            }
            .header-actions {
                width: 100%;
                justify-content: center;
                gap: 0.75rem;
                flex-wrap: wrap;
            }
            .action-btn {
                padding: 0.625rem 1.25rem;
                font-size: 0.8125rem;
                flex: 1;
                max-width: 140px;
                display: flex;
                align-items: center;
                gap: 0.5rem;
            }
            .btn-text {
                font-size: 0.8125rem;
                display: inline !important;
            }
            
            /* Mobile Container */
            .container {
                padding: 20px 15px;
                margin-top: 120px; /* Account for taller mobile header */
            }
            
            /* Mobile Typography */
            h1 {
                font-size: 1.75rem;
                margin-bottom: 20px;
            }
            h2 {
                font-size: 1.375rem;
                margin-top: 25px;
                margin-bottom: 15px;
            }
            h3 {
                font-size: 1.125rem;
                margin-top: 20px;
                margin-bottom: 12px;
            }
            h4 {
                font-size: 1rem;
                margin-top: 15px;
                margin-bottom: 8px;
            }
            p {
                font-size: 0.9375rem;
                line-height: 1.6;
                margin-bottom: 12px;
            }
            
            /* Mobile Tables */
            table {
                font-size: 0.875rem;
                margin: 15px 0;
                display: block;
                overflow-x: auto;
                white-space: nowrap;
                -webkit-overflow-scrolling: touch;
            }
            th, td {
                padding: 8px 6px;
                min-width: 80px;
            }
            th {
                font-size: 0.8125rem;
            }
            
            /* Mobile Lists */
            ul, ol {
                padding-left: 20px;
                margin-bottom: 12px;
            }
            li {
                font-size: 0.9375rem;
                margin-bottom: 6px;
                line-height: 1.5;
            }
            
            /* Mobile Boxes */
            .summary-box, .highlight, .warning-box {
                padding: 15px;
                margin: 15px 0;
                border-radius: 8px;
            }
            .summary-content {
                grid-template-columns: 1fr;
                gap: 0.75rem;
            }
            .summary-item {
                padding: 8px 0;
            }
            .item-label {
                font-size: 0.8125rem;
            }
            .item-value {
                font-size: 0.9375rem;
            }
            
            /* Mobile Code Blocks */
            .code-block {
                padding: 12px;
                font-size: 0.8125rem;
                margin: 12px 0;
                border-radius: 6px;
            }
            
            /* Mobile Footer */
            .footer {
                margin-top: 30px;
                padding-top: 15px;
                font-size: 0.8125rem;
            }
        }
        
        @media (max-width: 480px) {
            /* Extra Small Mobile */
            .container {
                padding: 15px 10px;
                margin-top: 140px;
            }
            
            .header-content {
                padding: 0 0.75rem;
            }
            .header-brand {
                font-size: 1rem;
            }
            .action-btn {
                padding: 0.5rem 1rem;
                font-size: 0.75rem;
                max-width: 120px;
                display: flex;
                align-items: center;
                gap: 0.375rem;
            }
            .btn-text {
                font-size: 0.75rem;
                display: inline !important;
            }
            
            h1 {
                font-size: 1.5rem;
            }
            h2 {
                font-size: 1.25rem;
            }
            h3 {
                font-size: 1.0625rem;
            }
            
            table {
                font-size: 0.8125rem;
            }
            th, td {
                padding: 6px 4px;
                min-width: 70px;
            }
            
            .summary-box, .highlight, .warning-box {
                padding: 12px;
                margin: 12px 0;
            }
            
            .code-block {
                padding: 10px;
                font-size: 0.75rem;
            }
        }
        
        /* Mobile Print Optimizations */
        @media print and (max-width: 768px) {
            .container {
                padding: 15px !important;
                margin: 0 !important;
                width: 100% !important;
            }
            h1, h2, h3, h4 {
                page-break-after: avoid;
                font-size: 1.2em;
            }
            table {
                font-size: 0.8em;
                page-break-inside: avoid;
            }
            .summary-box, .highlight, .warning-box {
                page-break-inside: avoid;
                margin: 10px 0;
            }
        }
        @media screen {
            body {
                margin: 0;
                padding: 0;
            }
        }
    </style>
</head>
<body>
    <!-- Professional Report Header -->
    <header class="report-header">
        <div class="header-content">
            <div class="header-brand">
                <div class="brand-icon">ð</div>
                <span class="brand-text">AI Trade Report</span>
            </div>
            <div class="header-actions">
                <button class="action-btn print" onclick="window.print()">
                    <span class="btn-icon">ð¨ï¸</span>
                    <span class="btn-text">""" + t['print'] + """</span>
                </button>
                <button class="action-btn pdf" onclick="downloadPDF()">
                    <span class="btn-icon">ð</span>
                    <span class="btn-text">""" + t['download_pdf'] + """</span>
                </button>
            </div>
        </div>
    </header>
    
    <div class="container" id="report-content">
        <div class="report-title-section">
            <h1>""" + t['report_title'] + """</h1>
            <div class="title-underline"></div>
        </div>
        <div class="summary-box">
            <div class="summary-header">
                <span class="summary-icon">ð</span>
                <span class="summary-title">""" + t['report_overview'] + """</span>
            </div>
            <div class="summary-content">
                <div class="summary-item">
                    <span class="item-label">""" + t['generated_by'] + """</span>
                    <span class="item-value">""" + t['ai_powered'] + """</span>
                </div>
                <div class="summary-item">
                    <span class="item-label">""" + t['date'] + """</span>
                    <span class="item-value">""" + datetime.now().strftime('%d %B %Y') + """</span>
                </div>
                <div class="summary-item">
                    <span class="item-label">""" + t['report_type'] + """</span>
                    <span class="item-value">""" + t['comprehensive_analysis'] + """</span>
                </div>
            </div>
        </div>
"""
    
    # Process content line by line
    lines = content.split('\n')
    in_table = False
    in_list = False
    list_type = 'ul'
    
    for line in lines:
        line = line.strip()
        
        if not line:
            if in_table:
                # End table
                html += "        </table>\n"
                in_table = False
            elif in_list:
                # End list
                html += f"        </{list_type}>\n"
                in_list = False
            else:
                html += "        <br>\n"
            continue
        
        # Handle different line types
        if line.startswith('# '):
            # Main title
            title = escape_html(line[2:])
            html += f"        <h1>{title}</h1>\n"
        elif line.startswith('## '):
            # Section heading
            title = escape_html(line[3:])
            html += f"        <h2>{title}</h2>\n"
        elif line.startswith('### '):
            # Subsection heading
            title = escape_html(line[4:])
            html += f"        <h3>{title}</h3>\n"
        elif line.startswith('#### '):
            # Sub-subsection heading
            title = escape_html(line[5:])
            html += f"        <h4>{title}</h4>\n"
        elif line.startswith('|') and '|' in line[1:]:
            # Table row
            if not in_table:
                # Start table
                html += "        <table>\n"
                in_table = True
            
            # Process table row
            cells = [cell.strip() for cell in line.split('|')[1:-1]]
            escaped_cells = [escape_html(cell) for cell in cells]
            
            # Check if this is a header row (contains dashes or is the first row)
            if any('---' in cell or '--' in cell for cell in cells) or not any('---' in prev_line for prev_line in lines if '|' in prev_line):
                html += "            <tr>\n"
                for cell in escaped_cells:
                    html += f"                <th>{cell}</th>\n"
                html += "            </tr>\n"
            else:
                html += "            <tr>\n"
                for cell in escaped_cells:
                    html += f"                <td>{cell}</td>\n"
                html += "            </tr>\n"
        elif line.startswith('- ') or line.startswith('* '):
            # Bullet point
            if not in_list:
                html += "        <ul>\n"
                in_list = True
                list_type = 'ul'
            text = escape_html(line[2:])
            html += f"            <li>{text}</li>\n"
        elif line.startswith('1. ') or line.startswith('2. ') or line.startswith('3. ') or line.startswith('4. ') or line.startswith('5. '):
            # Numbered list
            if not in_list:
                html += "        <ol>\n"
                in_list = True
                list_type = 'ol'
            text = escape_html(line[3:])
            html += f"            <li>{text}</li>\n"
        elif line.startswith('**') and line.endswith('**'):
            # Bold text
            text = escape_html(line[2:-2])
            html += f"        <p><strong>{text}</strong></p>\n"
        elif line.startswith('```'):
            # Code block
            if line == '```':
                html += "        <div class=\"code-block\">\n"
            else:
                html += f"        <div class=\"code-block\">\n            {escape_html(line[3:])}\n"
        elif line.endswith('```'):
            # End code block
            html += "        </div>\n"
        elif line.startswith('> '):
            # Quote/note
            text = escape_html(line[2:])
            html += f"        <div class=\"highlight\">{text}</div>\n"
        else:
            # Regular paragraph
            if line:
                text = escape_html(line)
                html += f"        <p>{text}</p>\n"
    
    # Close any open tags
    if in_table:
        html += "        </table>\n"
    if in_list:
        html += f"        </{list_type}>\n"
    
    # End HTML document
    html += """        <div class="footer">
            <p>""" + t['footer_text1'] + """</p>
            <p>""" + t['footer_text2'] + """</p>
        </div>
    </div>
    
    <script>
        // Define the function immediately when script loads
        function downloadPDF() {
            const element = document.getElementById('report-content');
            
            // Show loading state
            const btn = event.target;
            const originalText = btn.innerHTML;
            btn.innerHTML = 'â³ Generating PDF...';
            btn.disabled = true;
           
           // Wait for fonts and images to load
           setTimeout(function() {
               // First, ensure the element is visible and has content
               if (!element || element.offsetHeight === 0 || element.offsetWidth === 0) {
                   alert('Report content not found. Please refresh the page and try again.');
                   btn.innerHTML = originalText;
                   btn.disabled = false;
                   return;
               }
               
               // Ensure the element is visible and has content
               const rect = element.getBoundingClientRect();
               if (rect.width === 0 || rect.height === 0) {
                   alert('Report content is not visible. Please scroll to the report and try again.');
                   btn.innerHTML = originalText;
                   btn.disabled = false;
                   return;
               }
               
               // Force a reflow to ensure content is rendered
               element.style.display = 'none';
               element.offsetHeight; // Trigger reflow
               element.style.display = 'block';
               
               // Ensure all content is visible and expanded
               element.style.height = 'auto';
               element.style.minHeight = '100vh';
               element.style.overflow = 'visible';
               
               // Wait a bit more for any dynamic content to render
               setTimeout(function() {
               
               const opt = {
                   margin: [0.5, 0.5, 0.5, 0.5],
                   filename: 'AI_Trade_Report.pdf',
                   image: { type: 'jpeg', quality: 0.98 },
                   html2canvas: { 
                       scale: 1.2,
                       useCORS: true,
                       allowTaint: true,
                       backgroundColor: '#ffffff',
                       logging: false,
                       letterRendering: true,
                       width: element.scrollWidth,
                       height: element.scrollHeight,
                       scrollX: 0,
                       scrollY: 0,
                       windowWidth: element.scrollWidth,
                       windowHeight: element.scrollHeight
                   },
                   jsPDF: { 
                       unit: 'in', 
                       format: 'a4', 
                       orientation: 'portrait',
                       compress: true
                   },
                   pagebreak: { mode: ['css', 'legacy'] }
               };
              
              // Debug: Log element dimensions
              console.log('Element dimensions:', {
                  width: element.offsetWidth,
                  height: element.offsetHeight,
                  scrollWidth: element.scrollWidth,
                  scrollHeight: element.scrollHeight,
                  rect: element.getBoundingClientRect()
              });
              
              // Try the main PDF generation
              html2pdf().set(opt).from(element).save().then(function() {
                  btn.innerHTML = originalText;
                  btn.disabled = false;
              }).catch(function(error) {
                  console.error('PDF generation failed:', error);
                  
                  // Fallback: Try with simpler options
                  const simpleOpt = {
                      margin: 0.5,
                      filename: 'AI_Trade_Report.pdf',
                      image: { type: 'jpeg', quality: 0.8 },
                      html2canvas: { 
                          scale: 1,
                          backgroundColor: '#ffffff',
                          width: element.scrollWidth,
                          height: element.scrollHeight,
                          useCORS: true,
                          scrollX: 0,
                          scrollY: 0
                      },
                      jsPDF: { unit: 'in', format: 'a4', orientation: 'portrait' }
                  };
                  
                  html2pdf().set(simpleOpt).from(element).save().then(function() {
                      btn.innerHTML = originalText;
                      btn.disabled = false;
                  }).catch(function(fallbackError) {
                      console.error('Fallback PDF generation also failed:', fallbackError);
                      alert('PDF generation failed. Please use the Print button and save as PDF from your browser instead.');
                      btn.innerHTML = originalText;
                      btn.disabled = false;
                  });
              });
          }, 500);
      }, 1000);
  }
  
  // Also make it available on window object
  window.downloadPDF = downloadPDF;
 
          // Hide header when printing
  window.addEventListener('beforeprint', function() {
      const header = document.querySelector('.report-header');
      if (header) header.style.display = 'none';
  });
  
  window.addEventListener('afterprint', function() {
      const header = document.querySelector('.report-header');
      if (header) header.style.display = 'block';
  });
  
  // Ensure function is available when DOM is ready
  document.addEventListener('DOMContentLoaded', function() {
      // Function should be available now
      if (typeof downloadPDF === 'function') {
          console.log('downloadPDF function is ready');
      } else {
          console.error('downloadPDF function not properly defined');
      }
  });
  
  // Also try to make it available immediately
  if (typeof downloadPDF === 'function') {
      console.log('downloadPDF function loaded successfully');
  }
    </script>
</body>
</html>"""
    
    return html

@app.get("/", response_class=HTMLResponse)
def home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

@app.get("/health")
def health_check():
    return {"status": "healthy", "version": "1.0.0", "service": "AI Trade Report"}

@app.post("/generate", response_class=JSONResponse)
async def generate_report(
    brand: str = Form(...),
    product: str = Form(...),
    budget: str = Form(...),
    ai_model: str = Form("gpt-5"),
    language: str = Form("en")
):
    try:
        spec = InputSpec(brand=brand.strip(), product=product.strip(), budget=budget.strip())
        prompt_text = build_prompt(spec, analysis_date=datetime.now().strftime("%d %B %Y"), language=language)

        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_filename_txt = f"reports/report_{timestamp}.txt"
        report_filename_pdf = f"report_{timestamp}"

        if ai_model != "none":
            report_text = call_openai_chat(prompt_text, model=ai_model)
        else:
            report_text = prompt_text

        # Save text version
        with open(report_filename_txt, "w", encoding="utf-8") as f:
            f.write(report_text)

        # Create HTML version
        html_path = create_html_report(report_text, report_filename_pdf, language)
        actual_filename = f"{report_filename_pdf}.html"

        return JSONResponse({
            "status": "success",
            "redirect_url": f"/report/{actual_filename}",
            "report_name": actual_filename
        })
    except Exception as e:
        return JSONResponse({"status": "error", "message": str(e)})

@app.get("/report/{filename}")
def view_report(filename: str):
    filepath = os.path.join("reports", filename)
    if os.path.exists(filepath):
        return FileResponse(filepath, media_type="text/html")
    return {"status": "error", "message": "Report not found"}

@app.get("/download/{filename}")
def download_report(filename: str):
    filepath = os.path.join("reports", filename)
    if os.path.exists(filepath):
        # Determine media type based on file extension
        if filename.endswith('.html'):
            media_type = "text/html"
        elif filename.endswith('.pdf'):
            media_type = "application/pdf"
        elif filename.endswith('.txt'):
            media_type = "text/plain"
        else:
            media_type = "application/octet-stream"
        
        return FileResponse(filepath, media_type=media_type, filename=filename)
    return {"status": "error", "message": "File not found"}
