# AI Trade Report - Configuration Template
# Copy this file to .env and fill in your actual values

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# SQLite database (default - no changes needed for local development)
DATABASE_URL=sqlite:///./ai_trade_report.db

# For production, consider using PostgreSQL:
# DATABASE_URL=postgresql://username:password@localhost:5432/ai_trade_report

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
# JWT Secret Key - CHANGE THIS IN PRODUCTION!
# Generate a strong secret key: python -c "import secrets; print(secrets.token_urlsafe(32))"
SECRET_KEY=your-super-secret-key-here-change-this-in-production

# JWT Algorithm
ALGORITHM=HS256

# Token expiration time (in minutes)
ACCESS_TOKEN_EXPIRE_MINUTES=30

# =============================================================================
# OPENAI API CONFIGURATION
# =============================================================================
# Get your API key from: https://platform.openai.com/api-keys
OPENAI_API_KEY=sk-your-openai-api-key-here

# =============================================================================
# EMAIL CONFIGURATION (for password recovery)
# =============================================================================
# SMTP Server Settings
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587

# Email credentials
SMTP_USERNAME=your-email@gmail.com
SMTP_PASSWORD=your-app-password-here

# Email sender information
EMAIL_FROM=your-email@gmail.com
EMAIL_FROM_NAME=AI Trade Report

# =============================================================================
# APPLICATION SETTINGS
# =============================================================================
# Application name and version
APP_NAME=AI Trade Report
APP_VERSION=1.0.0

# Debug mode (set to False in production)
DEBUG=False

# =============================================================================
# HOST AND PORT CONFIGURATION
# =============================================================================
# For local development:
HOST=127.0.0.1
PORT=8000

# For production/server (accessible from network):
# HOST=0.0.0.0
# PORT=8000

# For custom domain (update CORS in app.py if needed):
# HOST=your-domain.com
# PORT=80

# =============================================================================
# OPTIONAL: ADVANCED CONFIGURATION
# =============================================================================
# CORS Origins (comma-separated list)
# CORS_ORIGINS=http://localhost:3000,https://yourdomain.com

# File upload limits
# MAX_FILE_SIZE=10485760  # 10MB in bytes

# Rate limiting (requests per minute)
# RATE_LIMIT=60

# =============================================================================
# EMAIL PROVIDER EXAMPLES
# =============================================================================

# Gmail (recommended):
# SMTP_SERVER=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USERNAME=your-email@gmail.com
# SMTP_PASSWORD=your-16-character-app-password

# Outlook/Hotmail:
# SMTP_SERVER=smtp-mail.outlook.com
# SMTP_PORT=587
# SMTP_USERNAME=your-email@outlook.com
# SMTP_PASSWORD=your-password

# Yahoo:
# SMTP_SERVER=smtp.mail.yahoo.com
# SMTP_PORT=587
# SMTP_USERNAME=your-email@yahoo.com
# SMTP_PASSWORD=your-app-password

# Custom SMTP:
# SMTP_SERVER=your-smtp-server.com
# SMTP_PORT=587
# SMTP_USERNAME=your-username
# SMTP_PASSWORD=your-password

# =============================================================================
# PRODUCTION CHECKLIST
# =============================================================================
# Before deploying to production, ensure:
# 1. DEBUG=False
# 2. Strong SECRET_KEY (use: python -c "import secrets; print(secrets.token_urlsafe(32))")
# 3. Valid OpenAI API key with billing enabled
# 4. Working email configuration
# 5. HOST=0.0.0.0 for server deployment
# 6. Consider using PostgreSQL instead of SQLite
# 7. Set up proper SSL/TLS certificates
# 8. Configure firewall rules
# 9. Set up monitoring and logging
# 10. Regular database backups
